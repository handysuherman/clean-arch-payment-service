// Code generated by MockGen. DO NOT EDIT.
// Source: internal/payment/domain/domain.go
//
// Generated by this command:
//
//	mockgen -package wkmock -destination internal/payment/worker/mock/mock.go -source=internal/payment/domain/domain.go
//

// Package wkmock is a generated GoMock package.
package wkmock

import (
	context "context"
	reflect "reflect"

	config "github.com/handysuherman/clean-arch-payment-service/internal/config"
	models "github.com/handysuherman/clean-arch-payment-service/internal/payment/models"
	pb "github.com/handysuherman/clean-arch-payment-service/internal/pb"
	kafka "github.com/handysuherman/clean-arch-payment-service/internal/pkg/kafka"
	gomock "go.uber.org/mock/gomock"
)

// MockProducerWorker is a mock of ProducerWorker interface.
type MockProducerWorker struct {
	ctrl     *gomock.Controller
	recorder *MockProducerWorkerMockRecorder
}

// MockProducerWorkerMockRecorder is the mock recorder for MockProducerWorker.
type MockProducerWorkerMockRecorder struct {
	mock *MockProducerWorker
}

// NewMockProducerWorker creates a new mock instance.
func NewMockProducerWorker(ctrl *gomock.Controller) *MockProducerWorker {
	mock := &MockProducerWorker{ctrl: ctrl}
	mock.recorder = &MockProducerWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerWorker) EXPECT() *MockProducerWorkerMockRecorder {
	return m.recorder
}

// OnConfigUpdate mocks base method.
func (m *MockProducerWorker) OnConfigUpdate(key string, config *config.App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", key, config)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockProducerWorkerMockRecorder) OnConfigUpdate(key, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockProducerWorker)(nil).OnConfigUpdate), key, config)
}

// OnProducerWorkerUpdate mocks base method.
func (m *MockProducerWorker) OnProducerWorkerUpdate(key string, workerProducerConnection *kafka.ProducerImpl) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnProducerWorkerUpdate", key, workerProducerConnection)
}

// OnProducerWorkerUpdate indicates an expected call of OnProducerWorkerUpdate.
func (mr *MockProducerWorkerMockRecorder) OnProducerWorkerUpdate(key, workerProducerConnection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnProducerWorkerUpdate", reflect.TypeOf((*MockProducerWorker)(nil).OnProducerWorkerUpdate), key, workerProducerConnection)
}

// PaymentStatusUpdated mocks base method.
func (m *MockProducerWorker) PaymentStatusUpdated(ctx context.Context, task *models.PaymentStatusUpdatedTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentStatusUpdated", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PaymentStatusUpdated indicates an expected call of PaymentStatusUpdated.
func (mr *MockProducerWorkerMockRecorder) PaymentStatusUpdated(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentStatusUpdated", reflect.TypeOf((*MockProducerWorker)(nil).PaymentStatusUpdated), ctx, task)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(ctx context.Context, arg *models.CreatePaymentRequest) (*pb.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg)
	ret0, _ := ret[0].(*pb.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), ctx, arg)
}

// GetAvailableChannel mocks base method.
func (m *MockUsecase) GetAvailableChannel(ctx context.Context, arg *models.GetPaymentChannelRequest) (*pb.GetPaymentChannelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableChannel", ctx, arg)
	ret0, _ := ret[0].(*pb.GetPaymentChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableChannel indicates an expected call of GetAvailableChannel.
func (mr *MockUsecaseMockRecorder) GetAvailableChannel(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableChannel", reflect.TypeOf((*MockUsecase)(nil).GetAvailableChannel), ctx, arg)
}

// GetAvailableChannels mocks base method.
func (m *MockUsecase) GetAvailableChannels(ctx context.Context, arg *models.GetPaymentChannelsRequest) (*pb.GetPaymentChannelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableChannels", ctx, arg)
	ret0, _ := ret[0].(*pb.GetPaymentChannelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableChannels indicates an expected call of GetAvailableChannels.
func (mr *MockUsecaseMockRecorder) GetAvailableChannels(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableChannels", reflect.TypeOf((*MockUsecase)(nil).GetAvailableChannels), ctx, arg)
}

// GetByID mocks base method.
func (m *MockUsecase) GetByID(ctx context.Context, arg *models.GetByIDPaymentRequest) (*pb.GetByIDPaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, arg)
	ret0, _ := ret[0].(*pb.GetByIDPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsecaseMockRecorder) GetByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecase)(nil).GetByID), ctx, arg)
}

// OnConfigUpdate mocks base method.
func (m *MockUsecase) OnConfigUpdate(key string, config *config.App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", key, config)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockUsecaseMockRecorder) OnConfigUpdate(key, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockUsecase)(nil).OnConfigUpdate), key, config)
}

// Update mocks base method.
func (m *MockUsecase) Update(ctx context.Context, arg *models.UpdatePaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsecaseMockRecorder) Update(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecase)(nil).Update), ctx, arg)
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// OnConfigUpdate mocks base method.
func (m *MockWorker) OnConfigUpdate(key string, config *config.App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", key, config)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockWorkerMockRecorder) OnConfigUpdate(key, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockWorker)(nil).OnConfigUpdate), key, config)
}
