// Code generated by MockGen. DO NOT EDIT.
// Source: internal/payment/repository/repository.go
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/payment/repository/mock/mock.go -source=internal/payment/repository/repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"
	redis "github.com/redis/go-redis/v9"
	decimal "github.com/shopspring/decimal"
	config "github.com/handysuherman/clean-arch-payment-service/internal/config"
	repository "github.com/handysuherman/clean-arch-payment-service/internal/payment/repository"
	pb "github.com/handysuherman/clean-arch-payment-service/internal/pb"
	customer "github.com/xendit/xendit-go/v5/customer"
	payment_method "github.com/xendit/xendit-go/v5/payment_method"
	payment_request "github.com/xendit/xendit-go/v5/payment_request"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockRepository) CreateCustomer(ctx context.Context, arg *repository.CreateCustomerParams) (*repository.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, arg)
	ret0, _ := ret[0].(*repository.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockRepositoryMockRecorder) CreateCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockRepository)(nil).CreateCustomer), ctx, arg)
}

// CreateCustomerPayment mocks base method.
func (m *MockRepository) CreateCustomerPayment(ctx context.Context, arg *repository.CreateCustomerPaymentParams) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerPayment", ctx, arg)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerPayment indicates an expected call of CreateCustomerPayment.
func (mr *MockRepositoryMockRecorder) CreateCustomerPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerPayment", reflect.TypeOf((*MockRepository)(nil).CreateCustomerPayment), ctx, arg)
}

// CreateCustomerTx mocks base method.
func (m *MockRepository) CreateCustomerTx(ctx context.Context, arg *repository.CreateCustomerTxParams) (repository.CreateCustomerTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerTx", ctx, arg)
	ret0, _ := ret[0].(repository.CreateCustomerTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerTx indicates an expected call of CreateCustomerTx.
func (mr *MockRepositoryMockRecorder) CreateCustomerTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerTx", reflect.TypeOf((*MockRepository)(nil).CreateCustomerTx), ctx, arg)
}

// CreateEwalletPayment mocks base method.
func (m *MockRepository) CreateEwalletPayment(ctx context.Context, arg *repository.CreateEwalletPaymentParams) (*payment_request.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEwalletPayment", ctx, arg)
	ret0, _ := ret[0].(*payment_request.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEwalletPayment indicates an expected call of CreateEwalletPayment.
func (mr *MockRepositoryMockRecorder) CreateEwalletPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEwalletPayment", reflect.TypeOf((*MockRepository)(nil).CreateEwalletPayment), ctx, arg)
}

// CreateEwalletPaymentTx mocks base method.
func (m *MockRepository) CreateEwalletPaymentTx(ctx context.Context, arg *repository.CreateEwalletPaymentTxParams) (repository.CreateEwalletPaymentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEwalletPaymentTx", ctx, arg)
	ret0, _ := ret[0].(repository.CreateEwalletPaymentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEwalletPaymentTx indicates an expected call of CreateEwalletPaymentTx.
func (mr *MockRepositoryMockRecorder) CreateEwalletPaymentTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEwalletPaymentTx", reflect.TypeOf((*MockRepository)(nil).CreateEwalletPaymentTx), ctx, arg)
}

// CreatePaymentChannel mocks base method.
func (m *MockRepository) CreatePaymentChannel(ctx context.Context, arg *repository.CreatePaymentChannelParams) (*repository.PaymentChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentChannel", ctx, arg)
	ret0, _ := ret[0].(*repository.PaymentChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentChannel indicates an expected call of CreatePaymentChannel.
func (mr *MockRepositoryMockRecorder) CreatePaymentChannel(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentChannel", reflect.TypeOf((*MockRepository)(nil).CreatePaymentChannel), ctx, arg)
}

// CreatePaymentMethod mocks base method.
func (m *MockRepository) CreatePaymentMethod(ctx context.Context, arg *repository.CreatePaymentMethodParams) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethod", ctx, arg)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentMethod indicates an expected call of CreatePaymentMethod.
func (mr *MockRepositoryMockRecorder) CreatePaymentMethod(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethod", reflect.TypeOf((*MockRepository)(nil).CreatePaymentMethod), ctx, arg)
}

// CreatePaymentReusability mocks base method.
func (m *MockRepository) CreatePaymentReusability(ctx context.Context, prname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentReusability", ctx, prname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentReusability indicates an expected call of CreatePaymentReusability.
func (mr *MockRepositoryMockRecorder) CreatePaymentReusability(ctx, prname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentReusability", reflect.TypeOf((*MockRepository)(nil).CreatePaymentReusability), ctx, prname)
}

// CreatePaymentStatus mocks base method.
func (m *MockRepository) CreatePaymentStatus(ctx context.Context, psname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentStatus", ctx, psname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentStatus indicates an expected call of CreatePaymentStatus.
func (mr *MockRepositoryMockRecorder) CreatePaymentStatus(ctx, psname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentStatus", reflect.TypeOf((*MockRepository)(nil).CreatePaymentStatus), ctx, psname)
}

// CreatePaymentType mocks base method.
func (m *MockRepository) CreatePaymentType(ctx context.Context, ptname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentType", ctx, ptname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentType indicates an expected call of CreatePaymentType.
func (mr *MockRepositoryMockRecorder) CreatePaymentType(ctx, ptname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentType", reflect.TypeOf((*MockRepository)(nil).CreatePaymentType), ctx, ptname)
}

// CreateQrCodePayment mocks base method.
func (m *MockRepository) CreateQrCodePayment(ctx context.Context, arg *repository.CreateQrCodePaymentParams) (*payment_method.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQrCodePayment", ctx, arg)
	ret0, _ := ret[0].(*payment_method.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQrCodePayment indicates an expected call of CreateQrCodePayment.
func (mr *MockRepositoryMockRecorder) CreateQrCodePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQrCodePayment", reflect.TypeOf((*MockRepository)(nil).CreateQrCodePayment), ctx, arg)
}

// CreateQrCodePaymentTx mocks base method.
func (m *MockRepository) CreateQrCodePaymentTx(ctx context.Context, arg *repository.CreateQrCodePaymentTxParams) (repository.CreateQrCodePaymentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQrCodePaymentTx", ctx, arg)
	ret0, _ := ret[0].(repository.CreateQrCodePaymentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQrCodePaymentTx indicates an expected call of CreateQrCodePaymentTx.
func (mr *MockRepositoryMockRecorder) CreateQrCodePaymentTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQrCodePaymentTx", reflect.TypeOf((*MockRepository)(nil).CreateQrCodePaymentTx), ctx, arg)
}

// CreateVirtualAccountBankPayment mocks base method.
func (m *MockRepository) CreateVirtualAccountBankPayment(ctx context.Context, arg *repository.CreateVirtualAccountBankPaymentParams) (*payment_method.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualAccountBankPayment", ctx, arg)
	ret0, _ := ret[0].(*payment_method.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualAccountBankPayment indicates an expected call of CreateVirtualAccountBankPayment.
func (mr *MockRepositoryMockRecorder) CreateVirtualAccountBankPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualAccountBankPayment", reflect.TypeOf((*MockRepository)(nil).CreateVirtualAccountBankPayment), ctx, arg)
}

// CreateVirtualAccountBankPaymentTx mocks base method.
func (m *MockRepository) CreateVirtualAccountBankPaymentTx(ctx context.Context, arg *repository.CreateVirtualAccountBankPaymentTxParams) (repository.CreateVirtualAccountBankPaymentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualAccountBankPaymentTx", ctx, arg)
	ret0, _ := ret[0].(repository.CreateVirtualAccountBankPaymentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualAccountBankPaymentTx indicates an expected call of CreateVirtualAccountBankPaymentTx.
func (mr *MockRepositoryMockRecorder) CreateVirtualAccountBankPaymentTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualAccountBankPaymentTx", reflect.TypeOf((*MockRepository)(nil).CreateVirtualAccountBankPaymentTx), ctx, arg)
}

// DeleteCache mocks base method.
func (m *MockRepository) DeleteCache(ctx context.Context, paymentCustomerID, paymentMethodID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCache", ctx, paymentCustomerID, paymentMethodID)
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockRepositoryMockRecorder) DeleteCache(ctx, paymentCustomerID, paymentMethodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockRepository)(nil).DeleteCache), ctx, paymentCustomerID, paymentMethodID)
}

// DeleteCreatePaymentIdempotencyKey mocks base method.
func (m *MockRepository) DeleteCreatePaymentIdempotencyKey(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCreatePaymentIdempotencyKey", ctx, key)
}

// DeleteCreatePaymentIdempotencyKey indicates an expected call of DeleteCreatePaymentIdempotencyKey.
func (mr *MockRepositoryMockRecorder) DeleteCreatePaymentIdempotencyKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCreatePaymentIdempotencyKey", reflect.TypeOf((*MockRepository)(nil).DeleteCreatePaymentIdempotencyKey), ctx, key)
}

// DeleteCustomerCache mocks base method.
func (m *MockRepository) DeleteCustomerCache(ctx context.Context, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCustomerCache", ctx, key)
}

// DeleteCustomerCache indicates an expected call of DeleteCustomerCache.
func (mr *MockRepositoryMockRecorder) DeleteCustomerCache(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerCache", reflect.TypeOf((*MockRepository)(nil).DeleteCustomerCache), ctx, key)
}

// GetAvailablePaymentChannel mocks base method.
func (m *MockRepository) GetAvailablePaymentChannel(ctx context.Context, arg *repository.GetAvailablePaymentChannelParams) (*repository.PaymentChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePaymentChannel", ctx, arg)
	ret0, _ := ret[0].(*repository.PaymentChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePaymentChannel indicates an expected call of GetAvailablePaymentChannel.
func (mr *MockRepositoryMockRecorder) GetAvailablePaymentChannel(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePaymentChannel", reflect.TypeOf((*MockRepository)(nil).GetAvailablePaymentChannel), ctx, arg)
}

// GetAvailablePaymentChannels mocks base method.
func (m *MockRepository) GetAvailablePaymentChannels(ctx context.Context, minAmount decimal.Decimal) ([]*repository.PaymentChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePaymentChannels", ctx, minAmount)
	ret0, _ := ret[0].([]*repository.PaymentChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePaymentChannels indicates an expected call of GetAvailablePaymentChannels.
func (mr *MockRepositoryMockRecorder) GetAvailablePaymentChannels(ctx, minAmount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePaymentChannels", reflect.TypeOf((*MockRepository)(nil).GetAvailablePaymentChannels), ctx, minAmount)
}

// GetCache mocks base method.
func (m *MockRepository) GetCache(ctx context.Context, paymentCustomerID, paymentMethodID string) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", ctx, paymentCustomerID, paymentMethodID)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockRepositoryMockRecorder) GetCache(ctx, paymentCustomerID, paymentMethodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockRepository)(nil).GetCache), ctx, paymentCustomerID, paymentMethodID)
}

// GetCreatePaymentIdempotencyKey mocks base method.
func (m *MockRepository) GetCreatePaymentIdempotencyKey(ctx context.Context, key string) (*pb.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatePaymentIdempotencyKey", ctx, key)
	ret0, _ := ret[0].(*pb.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreatePaymentIdempotencyKey indicates an expected call of GetCreatePaymentIdempotencyKey.
func (mr *MockRepositoryMockRecorder) GetCreatePaymentIdempotencyKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatePaymentIdempotencyKey", reflect.TypeOf((*MockRepository)(nil).GetCreatePaymentIdempotencyKey), ctx, key)
}

// GetCustomerByCustomerAppID mocks base method.
func (m *MockRepository) GetCustomerByCustomerAppID(ctx context.Context, customerAppID string) (*repository.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByCustomerAppID", ctx, customerAppID)
	ret0, _ := ret[0].(*repository.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByCustomerAppID indicates an expected call of GetCustomerByCustomerAppID.
func (mr *MockRepositoryMockRecorder) GetCustomerByCustomerAppID(ctx, customerAppID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByCustomerAppID", reflect.TypeOf((*MockRepository)(nil).GetCustomerByCustomerAppID), ctx, customerAppID)
}

// GetCustomerByPaymentCustomerID mocks base method.
func (m *MockRepository) GetCustomerByPaymentCustomerID(ctx context.Context, paymentCustomerID string) (*repository.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByPaymentCustomerID", ctx, paymentCustomerID)
	ret0, _ := ret[0].(*repository.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByPaymentCustomerID indicates an expected call of GetCustomerByPaymentCustomerID.
func (mr *MockRepositoryMockRecorder) GetCustomerByPaymentCustomerID(ctx, paymentCustomerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByPaymentCustomerID", reflect.TypeOf((*MockRepository)(nil).GetCustomerByPaymentCustomerID), ctx, paymentCustomerID)
}

// GetCustomerCache mocks base method.
func (m *MockRepository) GetCustomerCache(ctx context.Context, key string) (*repository.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCache", ctx, key)
	ret0, _ := ret[0].(*repository.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCache indicates an expected call of GetCustomerCache.
func (mr *MockRepositoryMockRecorder) GetCustomerCache(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCache", reflect.TypeOf((*MockRepository)(nil).GetCustomerCache), ctx, key)
}

// GetCustomerPaymentByID mocks base method.
func (m *MockRepository) GetCustomerPaymentByID(ctx context.Context, arg string) (*customer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerPaymentByID", ctx, arg)
	ret0, _ := ret[0].(*customer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerPaymentByID indicates an expected call of GetCustomerPaymentByID.
func (mr *MockRepositoryMockRecorder) GetCustomerPaymentByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerPaymentByID", reflect.TypeOf((*MockRepository)(nil).GetCustomerPaymentByID), ctx, arg)
}

// GetEwalletPaymentRequestByID mocks base method.
func (m *MockRepository) GetEwalletPaymentRequestByID(ctx context.Context, arg string) (*payment_request.PaymentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEwalletPaymentRequestByID", ctx, arg)
	ret0, _ := ret[0].(*payment_request.PaymentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEwalletPaymentRequestByID indicates an expected call of GetEwalletPaymentRequestByID.
func (mr *MockRepositoryMockRecorder) GetEwalletPaymentRequestByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEwalletPaymentRequestByID", reflect.TypeOf((*MockRepository)(nil).GetEwalletPaymentRequestByID), ctx, arg)
}

// GetPaymentChannelByID mocks base method.
func (m *MockRepository) GetPaymentChannelByID(ctx context.Context, uid string) (*repository.PaymentChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentChannelByID", ctx, uid)
	ret0, _ := ret[0].(*repository.PaymentChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentChannelByID indicates an expected call of GetPaymentChannelByID.
func (mr *MockRepositoryMockRecorder) GetPaymentChannelByID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentChannelByID", reflect.TypeOf((*MockRepository)(nil).GetPaymentChannelByID), ctx, uid)
}

// GetPaymentChannelByName mocks base method.
func (m *MockRepository) GetPaymentChannelByName(ctx context.Context, pcname string) (*repository.PaymentChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentChannelByName", ctx, pcname)
	ret0, _ := ret[0].(*repository.PaymentChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentChannelByName indicates an expected call of GetPaymentChannelByName.
func (mr *MockRepositoryMockRecorder) GetPaymentChannelByName(ctx, pcname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentChannelByName", reflect.TypeOf((*MockRepository)(nil).GetPaymentChannelByName), ctx, pcname)
}

// GetPaymentMethodByPaymentMethodID mocks base method.
func (m *MockRepository) GetPaymentMethodByPaymentMethodID(ctx context.Context, paymentMethodID string) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodByPaymentMethodID", ctx, paymentMethodID)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethodByPaymentMethodID indicates an expected call of GetPaymentMethodByPaymentMethodID.
func (mr *MockRepositoryMockRecorder) GetPaymentMethodByPaymentMethodID(ctx, paymentMethodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodByPaymentMethodID", reflect.TypeOf((*MockRepository)(nil).GetPaymentMethodByPaymentMethodID), ctx, paymentMethodID)
}

// GetPaymentMethodByReferenceID mocks base method.
func (m *MockRepository) GetPaymentMethodByReferenceID(ctx context.Context, paymentReferenceID string) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodByReferenceID", ctx, paymentReferenceID)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethodByReferenceID indicates an expected call of GetPaymentMethodByReferenceID.
func (mr *MockRepositoryMockRecorder) GetPaymentMethodByReferenceID(ctx, paymentReferenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodByReferenceID", reflect.TypeOf((*MockRepository)(nil).GetPaymentMethodByReferenceID), ctx, paymentReferenceID)
}

// GetPaymentMethodCustomer mocks base method.
func (m *MockRepository) GetPaymentMethodCustomer(ctx context.Context, arg *repository.GetPaymentMethodCustomerParams) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodCustomer", ctx, arg)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethodCustomer indicates an expected call of GetPaymentMethodCustomer.
func (mr *MockRepositoryMockRecorder) GetPaymentMethodCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodCustomer", reflect.TypeOf((*MockRepository)(nil).GetPaymentMethodCustomer), ctx, arg)
}

// GetPaymentReusabilityByName mocks base method.
func (m *MockRepository) GetPaymentReusabilityByName(ctx context.Context, prname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentReusabilityByName", ctx, prname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentReusabilityByName indicates an expected call of GetPaymentReusabilityByName.
func (mr *MockRepositoryMockRecorder) GetPaymentReusabilityByName(ctx, prname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentReusabilityByName", reflect.TypeOf((*MockRepository)(nil).GetPaymentReusabilityByName), ctx, prname)
}

// GetPaymentStatusByName mocks base method.
func (m *MockRepository) GetPaymentStatusByName(ctx context.Context, psname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatusByName", ctx, psname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatusByName indicates an expected call of GetPaymentStatusByName.
func (mr *MockRepositoryMockRecorder) GetPaymentStatusByName(ctx, psname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatusByName", reflect.TypeOf((*MockRepository)(nil).GetPaymentStatusByName), ctx, psname)
}

// GetPaymentTypeByName mocks base method.
func (m *MockRepository) GetPaymentTypeByName(ctx context.Context, ptname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentTypeByName", ctx, ptname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentTypeByName indicates an expected call of GetPaymentTypeByName.
func (mr *MockRepositoryMockRecorder) GetPaymentTypeByName(ctx, ptname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentTypeByName", reflect.TypeOf((*MockRepository)(nil).GetPaymentTypeByName), ctx, ptname)
}

// GetQrCodePaymentByID mocks base method.
func (m *MockRepository) GetQrCodePaymentByID(ctx context.Context, arg string) (*payment_method.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQrCodePaymentByID", ctx, arg)
	ret0, _ := ret[0].(*payment_method.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQrCodePaymentByID indicates an expected call of GetQrCodePaymentByID.
func (mr *MockRepositoryMockRecorder) GetQrCodePaymentByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQrCodePaymentByID", reflect.TypeOf((*MockRepository)(nil).GetQrCodePaymentByID), ctx, arg)
}

// GetVirtualAccountBankPaymentByID mocks base method.
func (m *MockRepository) GetVirtualAccountBankPaymentByID(ctx context.Context, arg string) (*payment_method.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualAccountBankPaymentByID", ctx, arg)
	ret0, _ := ret[0].(*payment_method.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualAccountBankPaymentByID indicates an expected call of GetVirtualAccountBankPaymentByID.
func (mr *MockRepositoryMockRecorder) GetVirtualAccountBankPaymentByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualAccountBankPaymentByID", reflect.TypeOf((*MockRepository)(nil).GetVirtualAccountBankPaymentByID), ctx, arg)
}

// OnConfigUpdate mocks base method.
func (m *MockRepository) OnConfigUpdate(key string, config *config.App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", key, config)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockRepositoryMockRecorder) OnConfigUpdate(key, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockRepository)(nil).OnConfigUpdate), key, config)
}

// OnPqsqlUpdate mocks base method.
func (m *MockRepository) OnPqsqlUpdate(key string, pqsqlConnection *pgxpool.Pool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPqsqlUpdate", key, pqsqlConnection)
}

// OnPqsqlUpdate indicates an expected call of OnPqsqlUpdate.
func (mr *MockRepositoryMockRecorder) OnPqsqlUpdate(key, pqsqlConnection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPqsqlUpdate", reflect.TypeOf((*MockRepository)(nil).OnPqsqlUpdate), key, pqsqlConnection)
}

// OnRedisUpdate mocks base method.
func (m *MockRepository) OnRedisUpdate(key string, redisConnection redis.UniversalClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRedisUpdate", key, redisConnection)
}

// OnRedisUpdate indicates an expected call of OnRedisUpdate.
func (mr *MockRepositoryMockRecorder) OnRedisUpdate(key, redisConnection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRedisUpdate", reflect.TypeOf((*MockRepository)(nil).OnRedisUpdate), key, redisConnection)
}

// PutCache mocks base method.
func (m *MockRepository) PutCache(ctx context.Context, arg *repository.PaymentMethod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCache", ctx, arg)
}

// PutCache indicates an expected call of PutCache.
func (mr *MockRepositoryMockRecorder) PutCache(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCache", reflect.TypeOf((*MockRepository)(nil).PutCache), ctx, arg)
}

// PutCreatePaymentIdempotencyKey mocks base method.
func (m *MockRepository) PutCreatePaymentIdempotencyKey(ctx context.Context, key string, arg *pb.CreatePaymentResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCreatePaymentIdempotencyKey", ctx, key, arg)
}

// PutCreatePaymentIdempotencyKey indicates an expected call of PutCreatePaymentIdempotencyKey.
func (mr *MockRepositoryMockRecorder) PutCreatePaymentIdempotencyKey(ctx, key, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCreatePaymentIdempotencyKey", reflect.TypeOf((*MockRepository)(nil).PutCreatePaymentIdempotencyKey), ctx, key, arg)
}

// PutCustomerCache mocks base method.
func (m *MockRepository) PutCustomerCache(ctx context.Context, arg *repository.Customer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCustomerCache", ctx, arg)
}

// PutCustomerCache indicates an expected call of PutCustomerCache.
func (mr *MockRepositoryMockRecorder) PutCustomerCache(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCustomerCache", reflect.TypeOf((*MockRepository)(nil).PutCustomerCache), ctx, arg)
}

// UpdatePaymentMethodCustomer mocks base method.
func (m *MockRepository) UpdatePaymentMethodCustomer(ctx context.Context, arg *repository.UpdatePaymentMethodCustomerParams) (*repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentMethodCustomer", ctx, arg)
	ret0, _ := ret[0].(*repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentMethodCustomer indicates an expected call of UpdatePaymentMethodCustomer.
func (mr *MockRepositoryMockRecorder) UpdatePaymentMethodCustomer(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentMethodCustomer", reflect.TypeOf((*MockRepository)(nil).UpdatePaymentMethodCustomer), ctx, arg)
}

// UpdateTx mocks base method.
func (m *MockRepository) UpdateTx(ctx context.Context, arg *repository.UpdateTxParams) (repository.UpdateTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, arg)
	ret0, _ := ret[0].(repository.UpdateTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockRepositoryMockRecorder) UpdateTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockRepository)(nil).UpdateTx), ctx, arg)
}
