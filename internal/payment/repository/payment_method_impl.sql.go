// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment_method_impl.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_method (
    uid,
    payment_method_id,
    payment_request_id,
    payment_reference_id,
    payment_customer_id,
    payment_business_id,
    payment_type,
    payment_status,
    payment_reusability,
    payment_channel,
    payment_amount,
    payment_qr_code,
    payment_virtual_account_number,
    payment_url,
    payment_description,
    created_at,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17
) RETURNING uid, payment_method_id, payment_request_id, payment_reference_id, payment_business_id, payment_customer_id, payment_type, payment_status, payment_reusability, payment_channel, payment_amount, payment_qr_code, payment_virtual_account_number, payment_url, payment_description, payment_failure_code, created_at, updated_at, expires_at, paid_at
`

type CreatePaymentMethodParams struct {
	Uid                         string             `json:"uid"`
	PaymentMethodID             string             `json:"payment_method_id"`
	PaymentRequestID            pgtype.Text        `json:"payment_request_id"`
	PaymentReferenceID          string             `json:"payment_reference_id"`
	PaymentCustomerID           string             `json:"payment_customer_id"`
	PaymentBusinessID           string             `json:"payment_business_id"`
	PaymentType                 string             `json:"payment_type"`
	PaymentStatus               string             `json:"payment_status"`
	PaymentReusability          string             `json:"payment_reusability"`
	PaymentChannel              string             `json:"payment_channel"`
	PaymentAmount               decimal.Decimal    `json:"payment_amount"`
	PaymentQrCode               pgtype.Text        `json:"payment_qr_code"`
	PaymentVirtualAccountNumber pgtype.Text        `json:"payment_virtual_account_number"`
	PaymentUrl                  pgtype.Text        `json:"payment_url"`
	PaymentDescription          string             `json:"payment_description"`
	CreatedAt                   pgtype.Timestamptz `json:"created_at"`
	ExpiresAt                   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg *CreatePaymentMethodParams) (*PaymentMethod, error) {
	row := q.db.QueryRow(ctx, createPaymentMethod,
		arg.Uid,
		arg.PaymentMethodID,
		arg.PaymentRequestID,
		arg.PaymentReferenceID,
		arg.PaymentCustomerID,
		arg.PaymentBusinessID,
		arg.PaymentType,
		arg.PaymentStatus,
		arg.PaymentReusability,
		arg.PaymentChannel,
		arg.PaymentAmount,
		arg.PaymentQrCode,
		arg.PaymentVirtualAccountNumber,
		arg.PaymentUrl,
		arg.PaymentDescription,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.Uid,
		&i.PaymentMethodID,
		&i.PaymentRequestID,
		&i.PaymentReferenceID,
		&i.PaymentBusinessID,
		&i.PaymentCustomerID,
		&i.PaymentType,
		&i.PaymentStatus,
		&i.PaymentReusability,
		&i.PaymentChannel,
		&i.PaymentAmount,
		&i.PaymentQrCode,
		&i.PaymentVirtualAccountNumber,
		&i.PaymentUrl,
		&i.PaymentDescription,
		&i.PaymentFailureCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.PaidAt,
	)
	return &i, err
}

const getPaymentMethodByPaymentMethodID = `-- name: GetPaymentMethodByPaymentMethodID :one
SELECT uid, payment_method_id, payment_request_id, payment_reference_id, payment_business_id, payment_customer_id, payment_type, payment_status, payment_reusability, payment_channel, payment_amount, payment_qr_code, payment_virtual_account_number, payment_url, payment_description, payment_failure_code, created_at, updated_at, expires_at, paid_at FROM payment_method WHERE payment_method_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentMethodByPaymentMethodID(ctx context.Context, paymentMethodID string) (*PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodByPaymentMethodID, paymentMethodID)
	var i PaymentMethod
	err := row.Scan(
		&i.Uid,
		&i.PaymentMethodID,
		&i.PaymentRequestID,
		&i.PaymentReferenceID,
		&i.PaymentBusinessID,
		&i.PaymentCustomerID,
		&i.PaymentType,
		&i.PaymentStatus,
		&i.PaymentReusability,
		&i.PaymentChannel,
		&i.PaymentAmount,
		&i.PaymentQrCode,
		&i.PaymentVirtualAccountNumber,
		&i.PaymentUrl,
		&i.PaymentDescription,
		&i.PaymentFailureCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.PaidAt,
	)
	return &i, err
}

const getPaymentMethodByReferenceID = `-- name: GetPaymentMethodByReferenceID :one
SELECT uid, payment_method_id, payment_request_id, payment_reference_id, payment_business_id, payment_customer_id, payment_type, payment_status, payment_reusability, payment_channel, payment_amount, payment_qr_code, payment_virtual_account_number, payment_url, payment_description, payment_failure_code, created_at, updated_at, expires_at, paid_at FROM payment_method WHERE payment_reference_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentMethodByReferenceID(ctx context.Context, paymentReferenceID string) (*PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodByReferenceID, paymentReferenceID)
	var i PaymentMethod
	err := row.Scan(
		&i.Uid,
		&i.PaymentMethodID,
		&i.PaymentRequestID,
		&i.PaymentReferenceID,
		&i.PaymentBusinessID,
		&i.PaymentCustomerID,
		&i.PaymentType,
		&i.PaymentStatus,
		&i.PaymentReusability,
		&i.PaymentChannel,
		&i.PaymentAmount,
		&i.PaymentQrCode,
		&i.PaymentVirtualAccountNumber,
		&i.PaymentUrl,
		&i.PaymentDescription,
		&i.PaymentFailureCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.PaidAt,
	)
	return &i, err
}

const getPaymentMethodCustomer = `-- name: GetPaymentMethodCustomer :one
SELECT uid, payment_method_id, payment_request_id, payment_reference_id, payment_business_id, payment_customer_id, payment_type, payment_status, payment_reusability, payment_channel, payment_amount, payment_qr_code, payment_virtual_account_number, payment_url, payment_description, payment_failure_code, created_at, updated_at, expires_at, paid_at FROM payment_method WHERE payment_method_id = $1 AND payment_customer_id = $2 LIMIT 1
`

type GetPaymentMethodCustomerParams struct {
	PaymentMethodID   string `json:"payment_method_id"`
	PaymentCustomerID string `json:"payment_customer_id"`
}

func (q *Queries) GetPaymentMethodCustomer(ctx context.Context, arg *GetPaymentMethodCustomerParams) (*PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodCustomer, arg.PaymentMethodID, arg.PaymentCustomerID)
	var i PaymentMethod
	err := row.Scan(
		&i.Uid,
		&i.PaymentMethodID,
		&i.PaymentRequestID,
		&i.PaymentReferenceID,
		&i.PaymentBusinessID,
		&i.PaymentCustomerID,
		&i.PaymentType,
		&i.PaymentStatus,
		&i.PaymentReusability,
		&i.PaymentChannel,
		&i.PaymentAmount,
		&i.PaymentQrCode,
		&i.PaymentVirtualAccountNumber,
		&i.PaymentUrl,
		&i.PaymentDescription,
		&i.PaymentFailureCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.PaidAt,
	)
	return &i, err
}

const updatePaymentMethodCustomer = `-- name: UpdatePaymentMethodCustomer :one
UPDATE payment_method
SET
    payment_status = COALESCE($1, payment_status),
    payment_failure_code = COALESCE($2, payment_failure_code),
    updated_at = COALESCE($3, updated_at),
    paid_at = COALESCE($4, paid_at)
WHERE
    payment_method_id = $5
AND
    payment_customer_id = $6
RETURNING uid, payment_method_id, payment_request_id, payment_reference_id, payment_business_id, payment_customer_id, payment_type, payment_status, payment_reusability, payment_channel, payment_amount, payment_qr_code, payment_virtual_account_number, payment_url, payment_description, payment_failure_code, created_at, updated_at, expires_at, paid_at
`

type UpdatePaymentMethodCustomerParams struct {
	PaymentStatus      pgtype.Text        `json:"payment_status"`
	PaymentFailureCode pgtype.Text        `json:"payment_failure_code"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	PaidAt             pgtype.Timestamptz `json:"paid_at"`
	PaymentMethodID    string             `json:"payment_method_id"`
	PaymentCustomerID  string             `json:"payment_customer_id"`
}

func (q *Queries) UpdatePaymentMethodCustomer(ctx context.Context, arg *UpdatePaymentMethodCustomerParams) (*PaymentMethod, error) {
	row := q.db.QueryRow(ctx, updatePaymentMethodCustomer,
		arg.PaymentStatus,
		arg.PaymentFailureCode,
		arg.UpdatedAt,
		arg.PaidAt,
		arg.PaymentMethodID,
		arg.PaymentCustomerID,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.Uid,
		&i.PaymentMethodID,
		&i.PaymentRequestID,
		&i.PaymentReferenceID,
		&i.PaymentBusinessID,
		&i.PaymentCustomerID,
		&i.PaymentType,
		&i.PaymentStatus,
		&i.PaymentReusability,
		&i.PaymentChannel,
		&i.PaymentAmount,
		&i.PaymentQrCode,
		&i.PaymentVirtualAccountNumber,
		&i.PaymentUrl,
		&i.PaymentDescription,
		&i.PaymentFailureCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.PaidAt,
	)
	return &i, err
}
