// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer_impl.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
    uid,
    customer_app_id,
    payment_customer_id,
    customer_name,
    created_at,
    email,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING uid, customer_app_id, payment_customer_id, customer_name, created_at, email, phone_number
`

type CreateCustomerParams struct {
	Uid               string             `json:"uid"`
	CustomerAppID     string             `json:"customer_app_id"`
	PaymentCustomerID string             `json:"payment_customer_id"`
	CustomerName      string             `json:"customer_name"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	Email             pgtype.Text        `json:"email"`
	PhoneNumber       pgtype.Text        `json:"phone_number"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg *CreateCustomerParams) (*Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Uid,
		arg.CustomerAppID,
		arg.PaymentCustomerID,
		arg.CustomerName,
		arg.CreatedAt,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Customer
	err := row.Scan(
		&i.Uid,
		&i.CustomerAppID,
		&i.PaymentCustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.Email,
		&i.PhoneNumber,
	)
	return &i, err
}

const getCustomerByCustomerAppID = `-- name: GetCustomerByCustomerAppID :one
SELECT uid, customer_app_id, payment_customer_id, customer_name, created_at, email, phone_number FROM customer WHERE customer_app_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByCustomerAppID(ctx context.Context, customerAppID string) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByCustomerAppID, customerAppID)
	var i Customer
	err := row.Scan(
		&i.Uid,
		&i.CustomerAppID,
		&i.PaymentCustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.Email,
		&i.PhoneNumber,
	)
	return &i, err
}

const getCustomerByPaymentCustomerID = `-- name: GetCustomerByPaymentCustomerID :one
SELECT uid, customer_app_id, payment_customer_id, customer_name, created_at, email, phone_number FROM customer WHERE payment_customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByPaymentCustomerID(ctx context.Context, paymentCustomerID string) (*Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByPaymentCustomerID, paymentCustomerID)
	var i Customer
	err := row.Scan(
		&i.Uid,
		&i.CustomerAppID,
		&i.PaymentCustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.Email,
		&i.PhoneNumber,
	)
	return &i, err
}
